/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imat;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import se.chalmers.ait.dat215.project.*;

/**
 *
 * @author Lasse
 */
public class IMatView extends javax.swing.JFrame {

    private ShoppingCart shoppingCart;
    private IMatDataHandler dh = IMatDataHandler.getInstance();

    List<Product> varorViewList = dh.getProducts();

    /**
     * Creates new form IMatView
     */
    public IMatView() {

        Utils.makeInköpslistaDir();

        shoppingCart = dh.getShoppingCart();

        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        updateKundVagn();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        selectedLabel = new javax.swing.JLabel();
        searchTextFIeld = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        LoginRegistreraButton = new javax.swing.JButton();
        leftPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTree2 = new javax.swing.JTree();
        jSeparator1 = new javax.swing.JSeparator();
        rightPanel = new javax.swing.JPanel();
        kundvagnPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        completetOrderButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        totalPris = new javax.swing.JLabel();
        centerPanel = new javax.swing.JPanel();
        cardPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        varorPanel = new javax.swing.JPanel();
        listorPanel = new imat.ListorPanel(this);
        loginPanel = new javax.swing.JPanel();
        completeOrderPanel = new javax.swing.JPanel();
        centerTopPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        sortPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        sortingComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1200, 750));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainPanel.setPreferredSize(new java.awt.Dimension(900, 750));
        mainPanel.setLayout(new java.awt.BorderLayout());

        topPanel.setBackground(new java.awt.Color(255, 255, 255));
        topPanel.setPreferredSize(new java.awt.Dimension(800, 60));

        selectedLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imat/resources/bilder/logga.jpg"))); // NOI18N
        selectedLabel.setText("IMAT");

        searchTextFIeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFIeldKeyPressed(evt);
            }
        });

        searchButton.setText("Sök");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        LoginRegistreraButton.setText("Login/registrera");
        LoginRegistreraButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginRegistreraButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addComponent(selectedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchTextFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LoginRegistreraButton)
                .addContainerGap(245, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(selectedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchTextFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton)
                        .addComponent(LoginRegistreraButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mainPanel.add(topPanel, java.awt.BorderLayout.PAGE_START);

        leftPanel.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setBorder(null);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Visa Alla");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Grönsaker");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Rotfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Kål");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Grönsaksfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ärtor, Linser & Bönor");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Kött");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Fisk");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Frukt & Bär");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Stenfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Meloner");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Citrusfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Exotiska Frukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Bär");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Bröd");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Drycker");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Varma Drycker");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Kalla Drycker");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Mejeriprodukter");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Mjöl, Socker & Salt");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Nötter & Frön");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Pasta, Potatis & Ris");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Pasta");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Potatis");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ris");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Sötsaker");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Kryddor");
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setToggleClickCount(1);
        jTree1.setRootVisible(false);
        jTree1.setToggleClickCount(1);

        for(MouseListener ml : jTree1.getMouseListeners()){
            System.out.println(123123);
            jTree1.removeMouseListener(ml);
        }
        jTree1.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
                jTree1TreeCollapsed(evt);
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
            }
        });
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTree1MousePressed(evt);
            }
        });
        jTree1.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                jTree1TreeWillCollapse(evt);
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
        });
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jScrollPane3.setBorder(null);

        jTree2.setRootVisible(false);
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Favoriter");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Inköpslistor");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Färdiga Kassar");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Dagens Erbjudande");
        treeNode1.add(treeNode2);
        jTree2.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTree2MousePressed(evt);
            }
        });
        jTree2.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree2ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jTree2);

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
            .addComponent(jScrollPane3)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(375, Short.MAX_VALUE))
        );

        mainPanel.add(leftPanel, java.awt.BorderLayout.LINE_START);

        rightPanel.setBackground(new java.awt.Color(255, 255, 255));
        rightPanel.setPreferredSize(new java.awt.Dimension(250, 550));

        kundvagnPanel.setBackground(new java.awt.Color(255, 255, 255));
        kundvagnPanel.setBorder(new javax.swing.border.MatteBorder(null));
        kundvagnPanel.setPreferredSize(new java.awt.Dimension(230, 5));
        kundvagnPanel.setLayout(new java.awt.GridLayout(1, 0));

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Kundvagn");

        completetOrderButton.setText("Till Kassan");
        completetOrderButton.setToolTipText("Gå till kassan med kundvagnen");
        completetOrderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completetOrderButtonActionPerformed(evt);
            }
        });

        jButton2.setText("Spara");
        jButton2.setToolTipText("Spara kundvagn som en inköpslista");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Töm kundvagn");
        jButton3.setToolTipText("Ta bort alla varor i kundvagnen");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        totalPris.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        totalPris.setText("Totalt:  " + String.format("%.2f", shoppingCart.getTotal()) + " kr");

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(completetOrderButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(totalPris, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addComponent(kundvagnPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kundvagnPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalPris, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(completetOrderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(524, 524, 524))
        );

        mainPanel.add(rightPanel, java.awt.BorderLayout.LINE_END);

        centerPanel.setBackground(new java.awt.Color(255, 255, 255));
        centerPanel.setLayout(new java.awt.BorderLayout());

        cardPanel.setBackground(new java.awt.Color(0, 102, 102));
        cardPanel.setLayout(new java.awt.CardLayout());

        jScrollPane2.getVerticalScrollBar().setUnitIncrement(8);

        varorPanel.setBackground(new java.awt.Color(0, 153, 0));
        varorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                varorPanelMouseEntered(evt);
            }
        });
        updateVarorView();

        varorPanel.setLayout(new ModifiedFlowLayout());

        jScrollPane2.setViewportView(varorPanel);

        cardPanel.add(jScrollPane2, "varorCard");
        cardPanel.add(listorPanel, "listorCard");

        loginPanel.setBackground(new java.awt.Color(0, 153, 0));
        cardPanel.add(loginPanel, "LoginCard");

        javax.swing.GroupLayout completeOrderPanelLayout = new javax.swing.GroupLayout(completeOrderPanel);
        completeOrderPanel.setLayout(completeOrderPanelLayout);
        completeOrderPanelLayout.setHorizontalGroup(
            completeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
        );
        completeOrderPanelLayout.setVerticalGroup(
            completeOrderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 949, Short.MAX_VALUE)
        );

        cardPanel.add(completeOrderPanel, "card5");

        centerPanel.add(cardPanel, java.awt.BorderLayout.CENTER);

        centerTopPanel.setPreferredSize(new java.awt.Dimension(500, 35));
        centerTopPanel.setLayout(new javax.swing.BoxLayout(centerTopPanel, javax.swing.BoxLayout.LINE_AXIS));

        titlePanel.setBackground(new java.awt.Color(255, 255, 255));

        TitleLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabel.setText("Title");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(0, 144, Short.MAX_VALUE)
                .addComponent(TitleLabel)
                .addGap(0, 139, Short.MAX_VALUE))
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(TitleLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        centerTopPanel.add(titlePanel);

        filler1.setBackground(new java.awt.Color(255, 255, 255));
        filler1.setRequestFocusEnabled(false);
        centerTopPanel.add(filler1);

        sortPanel.setBackground(new java.awt.Color(255, 255, 255));
        sortPanel.setAlignmentX(3.0F);

        jLabel2.setText("Sortering: ");

        sortingComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Popularitet", "Pris lågt-högt", "Pris högt-lågt", "Bokstavsordning A-Ö", "Bokstavsordning Ö-A" }));
        sortingComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortingComboBoxItemStateChanged(evt);
            }
        });
        sortingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sortPanelLayout = new javax.swing.GroupLayout(sortPanel);
        sortPanel.setLayout(sortPanelLayout);
        sortPanelLayout.setHorizontalGroup(
            sortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortPanelLayout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sortPanelLayout.setVerticalGroup(
            sortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(sortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sortingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        centerTopPanel.add(sortPanel);

        centerPanel.add(centerTopPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.add(centerPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void completetOrderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completetOrderButtonActionPerformed
        loginPanel.removeAll();
        SignInView SIV = new SignInView(LoginRegistreraButton);
        switchCard("LoginCard");
        TitleLabel.setText("Login");
        loginPanel.add(SIV);
    }//GEN-LAST:event_completetOrderButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        varorViewList = dh.findProducts(searchTextFIeld.getText().toLowerCase());
        TitleLabel.setText("<html>Sökresultat för: <i>" + searchTextFIeld.getText() + "</i></html>");
        updateVarorView();

    }//GEN-LAST:event_searchButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dh.shutDown();
        System.exit(1);
    }//GEN-LAST:event_formWindowClosing

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged

        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        String s = selectedNode.getUserObject().toString();
        if (!s.equals("Inköpslistor")) {
            switchCard("varorCard");
        }

        switch (s) {
            case "Visa Alla":
                varorViewList = dh.getProducts();
                break;
            case "Grönsaker":
                varorViewList = dh.getProducts(ProductCategory.POD);
                varorViewList.addAll(dh.getProducts(ProductCategory.CABBAGE));
                varorViewList.addAll(dh.getProducts(ProductCategory.ROOT_VEGETABLE));
                varorViewList.addAll(dh.getProducts(ProductCategory.VEGETABLE_FRUIT));
                break;

            case "Kål":
                varorViewList = dh.getProducts(ProductCategory.CABBAGE);
                //stuff
                break;
            case "Rotfrukter":
                varorViewList = dh.getProducts(ProductCategory.ROOT_VEGETABLE);
                break;
            case "Grönsaksfrukter":
                varorViewList = dh.getProducts(ProductCategory.VEGETABLE_FRUIT);
                break;
            case "Ärtor, Linser & Bönor":
                varorViewList = dh.getProducts(ProductCategory.POD);
                break;

            case "Kött":
                varorViewList = dh.getProducts(ProductCategory.MEAT);
                break;
            case "Fisk":
                varorViewList = dh.getProducts(ProductCategory.FISH);
                break;
            case "Frukt & Bär":
                varorViewList = dh.getProducts(ProductCategory.BERRY);
                varorViewList.addAll(dh.getProducts(ProductCategory.MELONS));
                varorViewList.addAll(dh.getProducts(ProductCategory.CITRUS_FRUIT));
                varorViewList.addAll(dh.getProducts(ProductCategory.EXOTIC_FRUIT));
                varorViewList.addAll(dh.getProducts(ProductCategory.FRUIT));
                break;

            case "Stenfrukter":
                varorViewList = dh.getProducts(ProductCategory.FRUIT);
                break;
            case "Meloner":
                varorViewList = dh.getProducts(ProductCategory.MELONS);
                break;
            case "Citrusfrukter":
                varorViewList = dh.getProducts(ProductCategory.CITRUS_FRUIT);
                break;
            case "Exotiska Frukter":
                varorViewList = dh.getProducts(ProductCategory.EXOTIC_FRUIT);
                break;
            case "Bär":
                varorViewList = dh.getProducts(ProductCategory.BERRY);
                break;

            case "Bröd":
                varorViewList = dh.getProducts(ProductCategory.BREAD);
                break;
            case "Drycker":
                varorViewList = dh.getProducts(ProductCategory.COLD_DRINKS);
                varorViewList.addAll(dh.getProducts(ProductCategory.HOT_DRINKS));
                break;
            case "Varma Drycker":
                varorViewList = dh.getProducts(ProductCategory.HOT_DRINKS);
                break;
            case "Kalla Drycker":
                varorViewList = dh.getProducts(ProductCategory.COLD_DRINKS);
                break;
            case "Mejeriprodukter":
                varorViewList = dh.getProducts(ProductCategory.DAIRIES);
                break;
            case "Mjöl, Socker & Salt":
                varorViewList = dh.getProducts(ProductCategory.FLOUR_SUGAR_SALT);
                break;
            case "Nötter & Frön":
                varorViewList = dh.getProducts(ProductCategory.NUTS_AND_SEEDS);
                break;

            case "Pasta, Potatis & Ris":
                varorViewList = dh.getProducts(ProductCategory.PASTA);
                varorViewList.addAll(dh.getProducts(ProductCategory.POTATO_RICE));
                break;
            case "Pasta":
                varorViewList = dh.getProducts(ProductCategory.PASTA);
                break;
            case "Potatis":
                varorViewList = dh.findProducts("potatis");
                break;
            case "Ris":
                varorViewList = dh.findProducts("ris");
                break;
            case "Sötsaker":
                varorViewList = dh.getProducts(ProductCategory.SWEET);
                break;
            case "Kryddor":
                varorViewList = dh.getProducts(ProductCategory.HERB);
                break;

        }

        TitleLabel.setText(s);
        jTree1.repaint();

        updateVarorView();

    }//GEN-LAST:event_jTree1ValueChanged

    private void jTree1TreeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_jTree1TreeWillCollapse

    }//GEN-LAST:event_jTree1TreeWillCollapse

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked


    }//GEN-LAST:event_jTree1MouseClicked

    private void jTree1TreeCollapsed(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_jTree1TreeCollapsed


    }//GEN-LAST:event_jTree1TreeCollapsed

    private void jTree1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MousePressed

        TreePath path = jTree1.getClosestPathForLocation(evt.getX(), evt.getY());
        if (jTree1.isPathSelected(path)) {
            if (jTree1.isExpanded(path)) {
                jTree1.collapsePath(path);
            } else {

                jTree1.expandPath(path);

            }
        } else {

            jTree1.expandPath(path);
        }

        jTree1.setSelectionPath(path);

        jTree2.clearSelection();
        /*int row = jTree1.getClosestRowForLocation(evt.getX(), evt.getY());
        
         if(jTree1.isRowSelected(row)){
         if(jTree1.isExpanded(row)){
         jTree1.collapseRow(row);
         } else {
                
         for(int i = 0; i < jTree1.getRowCount(); i++){
                    
         }
         jTree1.expandRow(row);
         }
         } else {
         jTree1.expandRow(row);
         }
        
        
         jTree1.setSelectionRow(row);*/

    }//GEN-LAST:event_jTree1MousePressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        clearKundVagn();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTree2ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree2ValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree2.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        String s = selectedNode.getUserObject().toString();

        if (!s.equals("Inköpslistor")) {
            switchCard("varorCard");
        }

        switch (s) {
            case "Favoriter":
                varorViewList = dh.favorites();
                updateVarorView();
                break;
            case "Inköpslistor":
                listorPanel.update();
                switchCard("listorCard");
                break;
            case "Färdiga Kassar":
                //
                break;
            case "Dagens Erbjudande":
                //asfsdf
                break;

        }

        TitleLabel.setText(s);
    }//GEN-LAST:event_jTree2ValueChanged

    private void jTree2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree2MousePressed
        TreePath path = jTree2.getClosestPathForLocation(evt.getX(), evt.getY());
        jTree2.setSelectionPath(path);
        jTree1.clearSelection();
    }//GEN-LAST:event_jTree2MousePressed


    private void sortingComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sortingComboBoxItemStateChanged

    }//GEN-LAST:event_sortingComboBoxItemStateChanged

    private void sortingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingComboBoxActionPerformed
        updateVarorView();
    }//GEN-LAST:event_sortingComboBoxActionPerformed

    private void searchTextFIeldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFIeldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            varorViewList = dh.findProducts(searchTextFIeld.getText().toLowerCase());
            TitleLabel.setText("<html>Sökresultat för: <i>" + searchTextFIeld.getText() + "</i></html>");
            updateVarorView();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFIeldKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String s;
        
        while(true){
            s = JOptionPane.showInputDialog("namn på listan?");
            
            if(s == null){
                return;
            }
            
            if(s.contains(";")){
                JOptionPane.showMessageDialog(this, "semikolon ej tillåtet");
                
            } else {
                break;
            }
        }
        
        
        Utils.saveShoppingCartAsList(s);
        
        listorPanel.update();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void LoginRegistreraButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginRegistreraButtonActionPerformed
        loginPanel.removeAll();
        SignInView SIV = new SignInView(LoginRegistreraButton);
        switchCard("LoginCard");
        TitleLabel.setText("Login");
        loginPanel.add(SIV);

    }//GEN-LAST:event_LoginRegistreraButtonActionPerformed

    private void varorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_varorPanelMouseEntered

    }//GEN-LAST:event_varorPanelMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("sun.java2d.noddraw", Boolean.TRUE.toString());
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IMatView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LoginRegistreraButton;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel centerTopPanel;
    private javax.swing.JPanel completeOrderPanel;
    private javax.swing.JButton completetOrderButton;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTree jTree1;
    private javax.swing.JTree jTree2;
    private javax.swing.JPanel kundvagnPanel;
    private javax.swing.JPanel leftPanel;
    private imat.ListorPanel listorPanel;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextFIeld;
    private javax.swing.JLabel selectedLabel;
    private javax.swing.JPanel sortPanel;
    private javax.swing.JComboBox sortingComboBox;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel totalPris;
    private javax.swing.JPanel varorPanel;
    // End of variables declaration//GEN-END:variables

    private void updateVarorView() {
        varorPanel.removeAll();
        varorPanel.revalidate();
        //varorPanel.repaint();  // denna behövdes inte

        String s = String.valueOf(sortingComboBox.getSelectedItem());
        if (s == null) {
            s = "Popularitet";
        }

        varorViewList.sort(new ProductComparator(s));

        for (Product p : varorViewList) {
            try {

                ProductSummaryView psv = new ProductSummaryView(p);
                psv.setAntalLabel();
                psv.getButton().addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        addToKundVagn(p, psv.getAmount());
                        psv.resetAmount();
                        updateKundVagn();
                    }
                });
                if (dh.isFavorite(p)) {
                    psv.setFavorite();
                }
                psv.getFavoriteButton().addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if (!dh.isFavorite(p)) {
                            File sourceimage = new File("src\\imat\\resources\\bilder\\heartFyllt.jpg");
                            try {
                                Image image = ImageIO.read(sourceimage);
                                psv.favoriteButton.setIcon(new ImageIcon(image));
                            } catch (IOException ex) {
                                Logger.getLogger(ProductSummaryView.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            //psv.filled = true;
                            dh.addFavorite(p);
                        } else {
                            File sourceimage = new File("src\\imat\\resources\\bilder\\HeartInteFyllt.jpg");
                            try {
                                Image image = ImageIO.read(sourceimage);
                                psv.favoriteButton.setIcon(new ImageIcon(image));
                            } catch (IOException ex) {
                                Logger.getLogger(ProductSummaryView.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            //psv.filled = false;
                            dh.removeFavorite(p);
                        }
                        //Lägga till till favoriter
                    }
                });
                psv.getListButton().addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        //Lägga till till inköpslista
                    }
                });
                varorPanel.add(psv);
            } catch (Exception e) {
            }
        }

        varorPanel.repaint();
    }

    public void updateKundVagn() {
        kundvagnPanel.removeAll();
        kundvagnPanel.revalidate();
        //System.out.println("total " + shoppingCart.getItems().size());
        kundvagnPanel.setLayout(new GridLayout((int) shoppingCart.getItems().size(), 1));
        int counter = 0;

        if (shoppingCart.getItems().size() == 0) {
            JLabel label = new JLabel("Kundvagnen tom");
            //System.out.println(label.getFont().toString());
            kundvagnPanel.add(label);
        }

        for (final ShoppingItem si : shoppingCart.getItems()) {
            final int c = counter;
            ProductInList pil = new ProductInList(si);
            pil.getButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    shoppingCart.removeItem(c);
                    updateKundVagn();
                }
            });
            pil.getplusButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (pil.isKgItem()) {
                        addToKundVagn(si.getProduct(), 0.2);
                    } else {
                        addToKundVagn(si.getProduct(), 1);
                    }
                    updateKundVagn();
                }
            });
            pil.getminusButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if(pil.isKgItem())
                    addToKundVagn(si.getProduct(), -0.2);
                    else
                        addToKundVagn(si.getProduct(), -1);
                    updateKundVagn();
                }
            });
            kundvagnPanel.add(pil);
            counter++;
        }
        
        kundvagnPanel.repaint();
        totalPris.setText("Totalt:  " + String.format("%.2f", shoppingCart.getTotal()) + " kr");
    }

    public void addToKundVagn(Product p, double d) {
        boolean contains = false;

        for (ShoppingItem si : shoppingCart.getItems()) {
            if (si.getProduct() == p) {
                si.setAmount(d + si.getAmount());
                contains = true;
            }
        }
        if (!contains) {
            shoppingCart.addProduct(p, d);
        }
    }

    private void clearKundVagn() {
        shoppingCart.clear();
        updateKundVagn();
    }

    public void switchCard(String card) {
        CardLayout cl = (CardLayout) cardPanel.getLayout();
        cl.show(cardPanel, card);
    }

}
