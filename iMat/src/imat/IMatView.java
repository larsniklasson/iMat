/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imat;

import java.awt.AWTException;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsEnvironment;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRootPane;
import javax.swing.JScrollBar;
import javax.swing.JSeparator;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreePath;
import se.chalmers.ait.dat215.project.*;

/**
 *
 * @author Lasse
 */
public class IMatView extends javax.swing.JFrame {

    /*
    Point pointAtPress;
    Point prevPoint;*/
    boolean isFullScreen = false;
    Point prevLocation;
    Dimension prevDimension;
    
    boolean isLoggedIn = false;
    String lastView ="";
    
    int x;
    int y;
    
    Map<Product, ProductSummaryView> map = new HashMap<Product, ProductSummaryView>();
    
    OrderPanel orderPanel;
    ListorPanel listorPanel;
    DefaultBagPanel defaultBagPanel;
    DagensErbjudandeView dagensErbjudandePanel;
    private ShoppingCart shoppingCart;
    private IMatDataHandler dh = IMatDataHandler.getInstance();
    
    private SignInView SIV;
    
    ComponentResizer cr;
    /**
     * Creates new form IMatView
     */
    public IMatView() {
        
        cr = new ComponentResizer();
        cr.registerComponent(this);
        cr.setSnapSize(new Dimension(1, 1));
        cr.setMinimumSize(new Dimension(40,40));
                
        this.setUndecorated(true);
        //this.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
        
        setSaleItems();
        
        initMap();
        
        Utils.makeLoginTextFile();
        Utils.makeInköpslistaDir();
        Utils.makeRecipeListDir();
        Utils.makeSaveCreitFile();
        shoppingCart = dh.getShoppingCart();

        initComponents();
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        updateKundVagn();

        
        treeImage();
        
        jTree1.setSelectionRow(0);
        
        setSize(1010,600);
        setLocationRelativeTo(null);
        
        Utils.changeScrollBar(jScrollPane1, 5);
        Utils.changeScrollBar(jScrollPane3, 7);
        Utils.changeScrollBar(jScrollPane2, 13);
        Utils.changeScrollBar(this.scrollfinnishorder, 13);
        
        
        topPanel.requestFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        searchTextFIeld = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        loginButton = new javax.swing.JLabel();
        leftPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTree2 = new javax.swing.JTree();
        jPanel5 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        rightPanel = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        antalProdukterIKundVagnLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        kundvagnPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        totalPris = new javax.swing.JLabel();
        centerPanel = new javax.swing.JPanel();
        cardPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        varorPanel = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        changeInfoPanel = new javax.swing.JPanel();
        scrollfinnishorder = new javax.swing.JScrollPane();
        completeOrderPanel = new javax.swing.JPanel();
        centerTopPanel = new javax.swing.JPanel();
        titlePanel = new javax.swing.JPanel();
        TitleLabel = new javax.swing.JLabel();
        antalProdukterLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        sortPanel = new javax.swing.JPanel();
        sortLabel = new javax.swing.JLabel();
        sortingComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainPanel.setBackground(Constants.BACKGROUND);
        mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102), 2));
        mainPanel.setPreferredSize(new java.awt.Dimension(900, 750));
        mainPanel.setLayout(new java.awt.BorderLayout());

        topPanel.setBackground(Constants.TOP_PANEL_BACKGROUND);
        topPanel.setPreferredSize(new java.awt.Dimension(800, 50));
        topPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                topPanelMouseDragged(evt);
            }
        });
        topPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                topPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                topPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                topPanelMouseReleased(evt);
            }
        });

        searchTextFIeld.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTextFIeldKeyPressed(evt);
            }
        });

        searchButton.setText("Sök");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("iMat");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imat/resources/bilder/closegray.png"))); // NOI18N
        jLabel1.setPreferredSize(new java.awt.Dimension(30, 33));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel1MouseReleased(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imat/resources/bilder/maximizegray.png"))); // NOI18N
        jLabel4.setPreferredSize(new java.awt.Dimension(30, 33));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel4MouseExited(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imat/resources/bilder/minimizegray.png"))); // NOI18N
        jLabel5.setPreferredSize(new java.awt.Dimension(30, 33));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });

        loginButton.setBackground(new java.awt.Color(230, 230, 230));
        loginButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        loginButton.setForeground(new java.awt.Color(228, 228, 228));
        loginButton.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        loginButton.setText("Logga in/Registrera ");
        loginButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        loginButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loginButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                loginButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                loginButtonMouseExited(evt);
            }
        });

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(searchTextFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addComponent(loginButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(searchTextFIeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(topPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(loginButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );

        mainPanel.add(topPanel, java.awt.BorderLayout.PAGE_START);

        leftPanel.setBackground(new java.awt.Color(245, 245, 245));
        leftPanel.setOpaque(false);
        leftPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                leftPanelMouseMoved(evt);
            }
        });
        leftPanel.setLayout(new javax.swing.BoxLayout(leftPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setBackground(new java.awt.Color(235, 255, 235));
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("ANVÄNDARE");
        jPanel4.add(jLabel7);

        leftPanel.add(jPanel4);

        jPanel2.setBackground(new java.awt.Color(235, 255, 235));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.BorderLayout());

        jTree2.setRootVisible(false);

        jTree2.setToggleClickCount(1);

        for(MouseListener ml : jTree2.getMouseListeners()){

            jTree2.removeMouseListener(ml);
        }
        jTree2.setBackground(new java.awt.Color(236, 255, 235));
        jTree2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Favoriter");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Inköpslistor");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Färdiga kassar");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Lax i ugn");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Kycklingpasta");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Räksmörgås");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Dagens Erbjudande");
        treeNode1.add(treeNode2);
        jTree2.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTree2.setOpaque(false);
        jTree2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTree2MousePressed(evt);
            }
        });
        jTree2.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree2ValueChanged(evt);
            }
        });
        jPanel2.add(jTree2, java.awt.BorderLayout.PAGE_START);

        jPanel5.setBackground(new java.awt.Color(235, 255, 235));
        jPanel5.setOpaque(false);
        jPanel5.setPreferredSize(new java.awt.Dimension(164, 15));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 164, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel2.add(jPanel5, java.awt.BorderLayout.CENTER);

        leftPanel.add(jPanel2);

        jPanel3.setBackground(new java.awt.Color(235, 255, 235));
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("VAROR");
        jPanel3.add(jLabel6);

        leftPanel.add(jPanel3);

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBackground(new java.awt.Color(0, 153, 0));
        jScrollPane1.setBorder(null);
        jScrollPane1.setOpaque(false);

        jTree1.setBackground(Constants.BACKGROUND);
        jTree1.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Visa Alla");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Grönsaker");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Rotfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Kål");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Grönsaksfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ärtväxter");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Kött");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Fisk");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Frukt & Bär");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Stenfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Meloner");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Citrusfrukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Exotiska Frukter");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Bär");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Bröd");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Drycker");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Varma Drycker");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Kalla Drycker");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Mejeriprodukter");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Mjöl, Socker & Salt");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Nötter & Frön");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Pasta, Potatis & Ris");
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Pasta");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Potatis");
        treeNode2.add(treeNode3);
        treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("Ris");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Sötsaker");
        treeNode1.add(treeNode2);
        treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Kryddor");
        treeNode1.add(treeNode2);
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTree1.setToggleClickCount(1);
        jTree1.setRootVisible(false);
        jTree1.setToggleClickCount(1);

        for(MouseListener ml : jTree1.getMouseListeners()){

            jTree1.removeMouseListener(ml);
        }
        jTree1.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
                jTree1TreeCollapsed(evt);
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
            }
        });
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTree1MousePressed(evt);
            }
        });
        jTree1.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener() {
            public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
                jTree1TreeWillCollapse(evt);
            }
            public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {
            }
        });
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        leftPanel.add(jPanel1);

        mainPanel.add(leftPanel, java.awt.BorderLayout.WEST);

        rightPanel.setBackground(new java.awt.Color(235, 255, 235));
        rightPanel.setOpaque(false);
        rightPanel.setPreferredSize(new java.awt.Dimension(260, 550));

        jPanel6.setOpaque(false);
        jPanel6.setPreferredSize(new java.awt.Dimension(64, 17));

        jLabel3.setFont(new java.awt.Font("Lucida Sans", 0, 20)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Kundvagn");

        antalProdukterIKundVagnLabel.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        antalProdukterIKundVagnLabel.setForeground(new java.awt.Color(119, 119, 119));
        antalProdukterIKundVagnLabel.setText("0 Produkter");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(antalProdukterIKundVagnLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(antalProdukterIKundVagnLabel)))
        );

        jPanel7.setBackground(new java.awt.Color(255, 51, 0));
        jPanel7.setOpaque(false);
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.PAGE_AXIS));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));
        jScrollPane3.setOpaque(false);
        jScrollPane3.getVerticalScrollBar().setUnitIncrement(8);

        kundvagnPanel.setOpaque(false);
        kundvagnPanel.setLayout(new java.awt.GridLayout(1, 1));
        jScrollPane3.setViewportView(kundvagnPanel);

        jPanel7.add(jScrollPane3);

        jPanel8.setBackground(new java.awt.Color(234, 255, 235));
        jPanel8.setOpaque(false);
        jPanel8.setPreferredSize(new java.awt.Dimension(256, 100));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel9.setBackground(new java.awt.Color(235, 255, 235));
        jPanel9.setOpaque(false);

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Spara");
        jButton3.setToolTipText("Spara som inköpslista");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(153, 153, 153));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Töm ");
        jButton5.setToolTipText("Töm kundvagnen");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(Constants.CHECK_OUT_BUTTON_COLOR);
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Till Kassan");
        jButton6.setToolTipText("Gå vidare till kassan");
        jButton6.setBorderPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        totalPris.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        totalPris.setText("jLabel8");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(totalPris, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(totalPris, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel8.add(jPanel9, java.awt.BorderLayout.NORTH);

        jPanel7.add(jPanel8);

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(2, 2, 2))
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        mainPanel.add(rightPanel, java.awt.BorderLayout.LINE_END);

        centerPanel.setBackground(new java.awt.Color(194, 194, 194));
        centerPanel.setOpaque(false);
        centerPanel.setPreferredSize(new java.awt.Dimension(700, 47));
        centerPanel.setLayout(new java.awt.BorderLayout());

        cardPanel.setBackground(imat.Constants.MAIN_PANEL_OUTSIDE_BORDER_COLOR);
        cardPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                cardPanelMouseExited(evt);
            }
        });
        cardPanel.setLayout(new java.awt.CardLayout());

        jScrollPane2.getVerticalScrollBar().setUnitIncrement(8);

        varorPanel.setBackground(new java.awt.Color(255, 255, 255));
        varorPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                varorPanelMouseMoved(evt);
            }
        });
        varorPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                varorPanelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                varorPanelMouseExited(evt);
            }
        });

        varorPanel.setLayout(new ModifiedFlowLayout());

        jScrollPane2.setViewportView(varorPanel);

        cardPanel.add(jScrollPane2, "varorCard");

        loginPanel.setBackground(new java.awt.Color(255, 255, 255));
        loginPanel.setBorder(imat.Constants.MAIN_PANEL_BORDER);
        cardPanel.add(loginPanel, "LoginCard");

        changeInfoPanel.setBackground(new java.awt.Color(255, 255, 255));
        changeInfoPanel.setBorder(imat.Constants.MAIN_PANEL_BORDER);
        cardPanel.add(changeInfoPanel, "changeInfoCard");

        scrollfinnishorder.getVerticalScrollBar().setUnitIncrement(8);
        scrollfinnishorder.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        completeOrderPanel.setBackground(new java.awt.Color(255, 255, 255));
        completeOrderPanel.setBorder(imat.Constants.MAIN_PANEL_BORDER);
        scrollfinnishorder.setViewportView(completeOrderPanel);

        cardPanel.add(scrollfinnishorder, "completeOrderCard");

        listorPanel = new ListorPanel(this);
        cardPanel.add(listorPanel,"listorCard");
        defaultBagPanel = new DefaultBagPanel(this);
        cardPanel.add(defaultBagPanel, "defaultBagCard");
        orderPanel = new imat.OrderPanel(this);
        cardPanel.add(orderPanel, "orderCard");
        dagensErbjudandePanel = new imat.DagensErbjudandeView(this);
        cardPanel.add(dagensErbjudandePanel, "dagensErbjudandeCard");

        centerPanel.add(cardPanel, java.awt.BorderLayout.CENTER);

        centerTopPanel.setBackground(new java.awt.Color(235, 255, 236));
        centerTopPanel.setOpaque(false);
        centerTopPanel.setPreferredSize(new java.awt.Dimension(500, 42));
        centerTopPanel.setLayout(new javax.swing.BoxLayout(centerTopPanel, javax.swing.BoxLayout.LINE_AXIS));

        titlePanel.setBackground(new java.awt.Color(255, 255, 255));
        titlePanel.setOpaque(false);

        TitleLabel.setFont(new java.awt.Font("Lucida Sans", 0, 20)); // NOI18N
        TitleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        TitleLabel.setText("Title");

        antalProdukterLabel.setFont(new java.awt.Font("Lucida Sans", 0, 13)); // NOI18N
        antalProdukterLabel.setForeground(new java.awt.Color(102, 102, 102));
        antalProdukterLabel.setText("8 Produkter");

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(TitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(antalProdukterLabel)
                .addContainerGap())
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(titlePanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TitleLabel)
                    .addComponent(antalProdukterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        centerTopPanel.add(titlePanel);

        filler1.setBackground(new java.awt.Color(255, 255, 255));
        filler1.setRequestFocusEnabled(false);
        centerTopPanel.add(filler1);

        sortPanel.setBackground(new java.awt.Color(255, 255, 255));
        sortPanel.setAlignmentX(3.0F);
        sortPanel.setOpaque(false);
        sortPanel.setPreferredSize(new java.awt.Dimension(201, 41));

        sortLabel.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        sortLabel.setText("Sortering:");

        sortingComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Popularitet", "Pris lågt-högt", "Pris högt-lågt", "Bokstavsordning A-Ö", "Bokstavsordning Ö-A" }));
        sortingComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sortingComboBoxItemStateChanged(evt);
            }
        });
        sortingComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortingComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sortPanelLayout = new javax.swing.GroupLayout(sortPanel);
        sortPanel.setLayout(sortPanelLayout);
        sortPanelLayout.setHorizontalGroup(
            sortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sortPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sortLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        sortPanelLayout.setVerticalGroup(
            sortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sortPanelLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(sortPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortLabel)
                    .addComponent(sortingComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        centerTopPanel.add(sortPanel);

        centerPanel.add(centerTopPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.add(centerPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        dh.shutDown();
        System.exit(1);
    }//GEN-LAST:event_formWindowClosing

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        
        
        ProductCategory[] pcArr;
        
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }
        
        showSortPanelAndAntalProductLabel(true);
        String s = selectedNode.getUserObject().toString();
        if (!s.equals("Inköpslistor")) {
            switchCard("varorCard");
        }
        
       
        
        switch (s) {
            case "Visa Alla":
                
                updateVarorView(ProductCategory.values());
                
                break;
            case "Grönsaker":
                pcArr = new ProductCategory[4];
                pcArr[0] = ProductCategory.POD;
                pcArr[1] = ProductCategory.CABBAGE;
                pcArr[2] = ProductCategory.ROOT_VEGETABLE;
                pcArr[3] = ProductCategory.VEGETABLE_FRUIT;
                updateVarorView(pcArr);
                break;

            case "Kål":
                updateVarorView(ProductCategory.CABBAGE);
                break;
            case "Rotfrukter":
                updateVarorView(ProductCategory.ROOT_VEGETABLE);
                break;
            case "Grönsaksfrukter":
                updateVarorView(ProductCategory.VEGETABLE_FRUIT);
                break;
            case "Ärtväxter":
                updateVarorView(ProductCategory.POD);
                break;

            case "Kött":
                updateVarorView(ProductCategory.MEAT);
                break;
            case "Fisk":
                updateVarorView(ProductCategory.FISH);
                break;
            case "Frukt & Bär":
                pcArr = new ProductCategory[5];
                pcArr[0] = ProductCategory.MELONS;
                pcArr[1] = ProductCategory.BERRY;
                pcArr[2] = ProductCategory.FRUIT;
                pcArr[3] = ProductCategory.EXOTIC_FRUIT;
                pcArr[4] = ProductCategory.CITRUS_FRUIT;
                updateVarorView(pcArr);
                break;

            case "Stenfrukter":
                updateVarorView(ProductCategory.FRUIT);
                break;
            case "Meloner":
                updateVarorView(ProductCategory.MELONS);
                break;
            case "Citrusfrukter":
                updateVarorView(ProductCategory.CITRUS_FRUIT);
                break;
            case "Exotiska Frukter":
                updateVarorView(ProductCategory.EXOTIC_FRUIT);
                break;
            case "Bär":
                updateVarorView(ProductCategory.BERRY);
                break;

            case "Bröd":
                updateVarorView(ProductCategory.BREAD);
                break;
            case "Drycker":
                pcArr = new ProductCategory[2];
                pcArr[0] = ProductCategory.HOT_DRINKS;
                pcArr[1] = ProductCategory.COLD_DRINKS;
                updateVarorView(pcArr);
                break;
            case "Varma Drycker":
                updateVarorView(ProductCategory.HOT_DRINKS);
                break;
            case "Kalla Drycker":
                updateVarorView(ProductCategory.COLD_DRINKS);
                break;
            case "Mejeriprodukter":
                updateVarorView(ProductCategory.DAIRIES);
                break;
            case "Mjöl, Socker & Salt":
                updateVarorView(ProductCategory.FLOUR_SUGAR_SALT);
                break;
            case "Nötter & Frön":
                updateVarorView(ProductCategory.NUTS_AND_SEEDS);
                break;

            case "Pasta, Potatis & Ris":
                pcArr = new ProductCategory[2];
                pcArr[0] = ProductCategory.PASTA;
                pcArr[1] = ProductCategory.POTATO_RICE;
                
                updateVarorView(pcArr);
                break;
            case "Pasta":
                updateVarorView(ProductCategory.PASTA);
                break;
            case "Potatis":
                updateVarorView(dh.findProducts("potatis"));
                break;
            case "Ris":
                updateVarorView(dh.findProducts("ris"));
                break;
            case "Sötsaker":
                updateVarorView(ProductCategory.SWEET);
                break;
            case "Kryddor":
                updateVarorView(ProductCategory.HERB);
                break;

        }

        TitleLabel.setText(s);
        jTree1.repaint(); 

        
        

    }//GEN-LAST:event_jTree1ValueChanged

    private void jTree1TreeWillCollapse(javax.swing.event.TreeExpansionEvent evt)throws javax.swing.tree.ExpandVetoException {//GEN-FIRST:event_jTree1TreeWillCollapse

    }//GEN-LAST:event_jTree1TreeWillCollapse

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked


    }//GEN-LAST:event_jTree1MouseClicked

    private void jTree1TreeCollapsed(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_jTree1TreeCollapsed


    }//GEN-LAST:event_jTree1TreeCollapsed

    private void jTree1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MousePressed
        
        if(evt.getButton() != MouseEvent.BUTTON1){
            return;
        }
        TreePath path = jTree1.getClosestPathForLocation(evt.getX(), evt.getY());
        if (jTree1.isPathSelected(path)) {
            if (jTree1.isExpanded(path)) {
                jTree1.collapsePath(path);
            } else {

                jTree1.expandPath(path);

            }
        } else {

            jTree1.expandPath(path);
        }

        jTree1.setSelectionPath(path);

        jTree2.clearSelection();
        /*int row = jTree1.getClosestRowForLocation(evt.getX(), evt.getY());
        
         if(jTree1.isRowSelected(row)){
         if(jTree1.isExpanded(row)){
         jTree1.collapseRow(row);
         } else {
                
         for(int i = 0; i < jTree1.getRowCount(); i++){
                    
         }
         jTree1.expandRow(row);
         }
         } else {
         jTree1.expandRow(row);
         }
        
        
         jTree1.setSelectionRow(row);*/

    }//GEN-LAST:event_jTree1MousePressed

    private void jTree2ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree2ValueChanged
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree2.getLastSelectedPathComponent();

        if (selectedNode == null) {
            return;
        }

        String s = selectedNode.getUserObject().toString();
        
        
        
        showSortPanelAndAntalProductLabel(s.equals("Favoriter"));
        
        if (!s.equals("Inköpslistor")) {
            switchCard("varorCard");
        }

        switch (s) {
            case "Favoriter":
                updateVarorView(dh.favorites());
                
                break;
            case "Inköpslistor":
                listorPanel.update();
                switchCard("listorCard");
                break;
            case "Färdiga kassar":
                defaultBagPanel.initializeDefaultBag(s);
                switchCard("defaultBagCard");
                break;
            case "Lax i ugn":
                defaultBagPanel.initializeDefaultBag(s);
                switchCard("defaultBagCard");
                break;
            case "Kycklingpasta":
                defaultBagPanel.initializeDefaultBag(s);
                switchCard("defaultBagCard");
                break;
            case "Räksmörgås":
                defaultBagPanel.initializeDefaultBag(s);
                switchCard("defaultBagCard");
                break;
            case "Dagens Erbjudande":
                switchCard("dagensErbjudandeCard");
                break;

        }

        TitleLabel.setText(s);
    }//GEN-LAST:event_jTree2ValueChanged

    private void jTree2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree2MousePressed
        TreePath path = jTree2.getClosestPathForLocation(evt.getX(), evt.getY());
        if (jTree2.isPathSelected(path)) {
            if (jTree2.isExpanded(path)) {
                jTree2.collapsePath(path);
            } else {

                jTree2.expandPath(path);

            }
        } else {

            jTree2.expandPath(path);
        }

        jTree2.setSelectionPath(path);

        jTree1.clearSelection();
    }//GEN-LAST:event_jTree2MousePressed


    private void sortingComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sortingComboBoxItemStateChanged

    }//GEN-LAST:event_sortingComboBoxItemStateChanged

    private void sortingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortingComboBoxActionPerformed
        sortVarorView();
        
    }//GEN-LAST:event_sortingComboBoxActionPerformed

    private void varorPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_varorPanelMouseEntered

    }//GEN-LAST:event_varorPanelMouseEntered

    private void topPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topPanelMouseDragged
        
        /*
        int deltax = (int) (evt.getXOnScreen()- pointAtPress.getX());
        int deltay = (int) (evt.getYOnScreen()- pointAtPress.getY());
        
        System.out.println("deltax " + deltax);
        System.out.println("deltay " + deltay);
        
        this.setLocation((int)(prevPoint.getX() + deltax), (int)(prevPoint.getY() + deltay));*/
        if(isFullScreen){
            this.setSize(994, 600);
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/maximizegray.png"));
            //this.setLocation(500, this.getLocation().y + evt.getY() - y);
            isFullScreen = false;
            
           
            
            
        }
        else {
            System.out.println(x);
            System.out.println(this.getLocation().x + evt.getX() - x);
            
            int newx = this.getLocation().x + evt.getX() - x;
            
            this.setLocation(newx, this.getLocation().y + evt.getY() - y);
        
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/maximizegray.png"));
            cr.setDragInsets(new Insets(5, 5, 5, 5));
            
        }
        
        
    }//GEN-LAST:event_topPanelMouseDragged

    private void topPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topPanelMousePressed
        if(isFullScreen){
            
            x = 996/2;
            if(evt.getXOnScreen() < 996/2){
                x = evt.getXOnScreen();
            }
            int screenwidth = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds().width;
            
            if(evt.getXOnScreen() > screenwidth - 996/2){
               int diff = evt.getXOnScreen() - (screenwidth - 996/2);
               x = 996 - (996/2 - diff);
            }
            
            y = evt.getY();
        } else {
            
            x = evt.getX();
            y = evt.getY();
        }
        

//pointAtPress = evt.getLocationOnScreen();
    }//GEN-LAST:event_topPanelMousePressed

    private void topPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topPanelMouseReleased
        //prevPoint = this.getLocation();
    }//GEN-LAST:event_topPanelMouseReleased

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        TitleLabel.setText("<html>Sökresultat för: <i>" + searchTextFIeld.getText() + "</i></html>");
        switchCard("varorCard");
        updateVarorView(dh.findProducts(searchTextFIeld.getText().toLowerCase()));
        jTree1.setSelectionRow(-1);
    }//GEN-LAST:event_searchButtonActionPerformed

    private void searchTextFIeldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTextFIeldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            searchButton.doClick();
            searchButton.requestFocus();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_searchTextFIeldKeyPressed

    private void jLabel1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseReleased
        
    }//GEN-LAST:event_jLabel1MouseReleased

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        jLabel1.setIcon(new ImageIcon("src/imat/resources/bilder/closewhite.png"));
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        jLabel1.setIcon(new ImageIcon("src/imat/resources/bilder/closegray.png"));
    }//GEN-LAST:event_jLabel1MouseExited

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        dh.shutDown();
        System.exit(1);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        if(!isFullScreen){
            Rectangle rec = GraphicsEnvironment.getLocalGraphicsEnvironment().getMaximumWindowBounds();
            prevLocation = this.getLocation();
            prevDimension = this.getSize();
            
            this.setSize(rec.width, rec.height);
            this.setLocation(0, 0);
            cr.setDragInsets(new Insets(0, 0, 0, 0));
            
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/smallergray.png"));
            isFullScreen = true;
        } else {
            System.out.println("hej");
            this.setSize(prevDimension);
            this.setLocation(prevLocation);
            
            cr.setDragInsets(new Insets(5, 5, 5, 5));
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/maximizegray.png"));
            isFullScreen = false;
            
        }
        
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        if(isFullScreen){
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/smallerwhite.png"));
        } else {
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/maximizewhite.png"));
        }
    }//GEN-LAST:event_jLabel4MouseEntered

    private void jLabel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseExited
                           
        if(isFullScreen){
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/smallergray.png"));
        } else {
            jLabel4.setIcon(new ImageIcon("src/imat/resources/bilder/maximizegray.png"));
        }
    }//GEN-LAST:event_jLabel4MouseExited

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        this.setState(JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        jLabel5.setIcon(new ImageIcon("src/imat/resources/bilder/minimizewhite.png"));
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseExited
                            
        jLabel5.setIcon(new ImageIcon("src/imat/resources/bilder/minimizegray.png"));
    }//GEN-LAST:event_jLabel5MouseExited

    private void topPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_topPanelMouseClicked
        if(evt.getClickCount() == 2){
            jLabel4MouseClicked(null);
        }
    }//GEN-LAST:event_topPanelMouseClicked

    private void loginButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseClicked
        
        
        if(!isLoggedIn){
            loginPanel.removeAll();
            loginPanel.revalidate();
            SIV = new SignInView(this,loginButton ,lastView);
            switchCard("LoginCard");
            TitleLabel.setText("Login");
            showSortPanelAndAntalProductLabel(false);
            loginPanel.add(SIV);
        } else {
            JPopupMenu pu = new JPopupMenu();
            JMenuItem cs = new JMenuItem("Min profil");
            JMenuItem mi = new JMenuItem("Logga ut");
            JMenuItem xx = new JMenuItem("Tidigare Köp");
            mi.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    isLoggedIn = false;
                    loginButton.setText("Logga in");
                    loginButton.setIcon(null);
                    
                }
            });
            
            cs.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    changeInfoPanel.removeAll();
                    changeInfoPanel.revalidate();
                    changeInfoPanel.add(new changeInfoView());
                    TitleLabel.setText("Inställningar");
                    showSortPanelAndAntalProductLabel(false);
                    switchCard("changeInfoCard");
                    
                    
                }
            });
            
            xx.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    orderPanel.update();
                    showSortPanelAndAntalProductLabel(false);
                    switchCard("orderCard");
                    
                    TitleLabel.setText("Tidigare Köp");
                }
            });
            
            
            pu.add(cs);
            pu.add(xx);
            pu.add(mi);
            pu.show(loginButton, loginButton.getWidth()- mi.getPreferredSize().width,loginButton.getHeight());
        }
    }//GEN-LAST:event_loginButtonMouseClicked

    private void loginButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseEntered
        loginButton.setForeground(Color.white);
    }//GEN-LAST:event_loginButtonMouseEntered

    private void loginButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loginButtonMouseExited
        loginButton.setForeground(new Color(230,230,230));
    }//GEN-LAST:event_loginButtonMouseExited

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String s;
        
        while(true){
            s = JOptionPane.showInputDialog("namn på listan?");
            
            if(s == null){
                return;
            }
            
            if(s.contains(";")){
                JOptionPane.showMessageDialog(this, "semikolon ej tillåtet");
                
            } else {
                break;
            }
        }
        
        
        Utils.saveShoppingCartAsList(s);
        
        listorPanel.update();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        completeOrderPanel.removeAll();
        FinalBuyView FBV = new FinalBuyView(this.completeOrderPanel, this);
        switchCard("completeOrderCard");
        TitleLabel.setText("Order");
        completeOrderPanel.add(FBV);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(shoppingCart.getItems().size()>0){
        if (JOptionPane.showConfirmDialog(jButton5, 
            "Är du säker på att du vill tömma kundvagnen?", "Tömma kundvagnen?", 
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
            clearKundVagn();
        }
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void varorPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_varorPanelMouseMoved
        for(Component c : varorPanel.getComponents()){
            if(c instanceof ProductSummaryView){
                ((ProductSummaryView)c).setNoHoverBorder();
                ((ProductSummaryView)c).hideFavoriteAndListButtons();
            }
        }
        
        
    }//GEN-LAST:event_varorPanelMouseMoved

    private void varorPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_varorPanelMouseExited
        
    }//GEN-LAST:event_varorPanelMouseExited

    private void cardPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cardPanelMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_cardPanelMouseExited

    private void leftPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_leftPanelMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_leftPanelMouseMoved

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        System.setProperty("sun.java2d.noddraw", Boolean.TRUE.toString());
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        
        UIManager.put("List.focusCellHighlightBorder", BorderFactory.createEmptyBorder(1, 5, 1, 5));
        UIManager.put("nimbusSelectionBackground", Constants.TREE_SELECTION_BACKGROUND);
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IMatView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IMatView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JLabel antalProdukterIKundVagnLabel;
    private javax.swing.JLabel antalProdukterLabel;
    private javax.swing.JPanel cardPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JPanel centerTopPanel;
    private javax.swing.JPanel changeInfoPanel;
    private javax.swing.JPanel completeOrderPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTree jTree1;
    private javax.swing.JTree jTree2;
    private javax.swing.JPanel kundvagnPanel;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JLabel loginButton;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JScrollPane scrollfinnishorder;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchTextFIeld;
    private javax.swing.JLabel sortLabel;
    private javax.swing.JPanel sortPanel;
    private javax.swing.JComboBox sortingComboBox;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel totalPris;
    private javax.swing.JPanel varorPanel;
    // End of variables declaration//GEN-END:variables
    
    private void updateVarorView(List<Product> list){
        antalProdukterLabel.setText(list.size() + " Produkter");
        
        varorPanel.removeAll();
        varorPanel.revalidate();
        
        String s = String.valueOf(sortingComboBox.getSelectedItem());
        Collections.sort(list, new ProductComparator(s));
        
        for(Product p: list){
            varorPanel.add(map.get(p));
        }
        
        varorPanel.repaint();
        
    }
    
    private void updateVarorView(ProductCategory pc){
        updateVarorView(new ProductCategory[]{pc});
    }
    
    
    
    
    private void updateVarorView(ProductCategory[] pcArr) {
        
        List<Product> list = new ArrayList<Product>();

        String s = String.valueOf(sortingComboBox.getSelectedItem());
        if (s == null) {
            s = "Popularitet";
        }
        
        for(ProductCategory pc: pcArr){
            for(Product p : dh.getProducts(pc)){
                list.add(p);
            }
        }
        
        updateVarorView(list);
    }
    
    
    
    public void updateKundVagn() {
        antalProdukterIKundVagnLabel.setText(shoppingCart.getItems().size() + " Produkter");
        kundvagnPanel.removeAll();
        kundvagnPanel.revalidate();
        //System.out.println("total " + shoppingCart.getItems().size());
        kundvagnPanel.setLayout(new GridLayout((int) shoppingCart.getItems().size(), 1));
        int counter = 0;

        if (shoppingCart.getItems().size() == 0) {
            JLabel label = new JLabel("Kundvagnen tom");
            //System.out.println(label.getFont().toString());
            kundvagnPanel.add(label);
        }
        
        
        
        
        for (final ShoppingItem si : shoppingCart.getItems()) {
            final int c = counter;
            
            
            ProductInList pil = new ProductInList(si);
            
            
            
            pil.getButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    shoppingCart.removeItem(c);
                    updateKundVagn();
                }
            });
            
            pil.getplusButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (pil.isKgItem()) {
                        addToKundVagn(si.getProduct(), 0.2);
                    } else {
                        addToKundVagn(si.getProduct(), 1);
                    }
                    updateKundVagn();
                }
            });
            pil.getminusButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if(pil.isKgItem() && si.getAmount() > 0.3)
                    addToKundVagn(si.getProduct(), -0.2);
                    else if(si.getAmount() > 1)
                        addToKundVagn(si.getProduct(), -1);
                    updateKundVagn();
                }
            });
            kundvagnPanel.add(pil);
            counter++;
            
        }
        
        
        
        int height = jPanel7.getSize().height;
        
        int a = shoppingCart.getItems().size() * 30;
        System.out.println(height);
        
        //jScrollPane3.setMinimumSize(new Dimension(0, Math.min(a, height - 100)));
        jScrollPane3.setMaximumSize(new Dimension(252, Math.min(a, height -130)));
        //jScrollPane3.setPreferredSize(new Dimension(Integer.MAX_VALUE, Math.min(a, height -120)));
        
        
        
        kundvagnPanel.repaint();
        totalPris.setText("Totalt:  " + String.format("%.2f", shoppingCart.getTotal()) + " kr");
        
        
        
    }

    public void addToKundVagn(Product p, double d) {
        boolean contains = false;

        for (ShoppingItem si : shoppingCart.getItems()) {
            if (si.getProduct() == p) {
                si.setAmount(Math.max(0, d + si.getAmount()));
                contains = true;
            }
        }
        if (!contains) {
            shoppingCart.addProduct(p, d);
            
            
        
            
        }
    }

    private void clearKundVagn() {
        shoppingCart.clear();
        updateKundVagn();
    }

    public void switchCard(String card) {
        CardLayout cl = (CardLayout) cardPanel.getLayout();
        cl.show(cardPanel, card);
        if(!card.equals("LoginCard")){
           lastView = card;
        }
    }
    

    
    
    private void initMap() {
        for(Product p : dh.getProducts()){
            ProductSummaryView psv = new ProductSummaryView(this,p);


            psv.setAntalLabel();
            psv.getButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    addToKundVagn(p, psv.getAmount());
                    psv.resetAmount();
                    updateKundVagn();
                }
            });
            if (dh.isFavorite(p)) {
                psv.setFavorite();
                psv.favoriteButton.setToolTipText("Tag bort från favoriter");
            }
            else{
                psv.favoriteButton.setToolTipText("Lägg till i favoriter");
            }

            psv.getFavoriteButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    if (!dh.isFavorite(p)) {
                        File sourceimage = new File("src/imat/resources/bilder/heartFylltsmall.jpg");
                        try {
                            Image image = ImageIO.read(sourceimage);
                            psv.favoriteButton.setIcon(new ImageIcon(image));
                            psv.favoriteButton.setToolTipText("Tag bort från favoriter");
                        } catch (IOException ex) {
                            Logger.getLogger(ProductSummaryView.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        //psv.filled = true;
                        dh.addFavorite(p);
                    } else {
                        File sourceimage = new File("src/imat/resources/bilder/HeartInteFylltsmall.jpg");
                        try {
                            Image image = ImageIO.read(sourceimage);
                            psv.favoriteButton.setIcon(new ImageIcon(image));
                            psv.favoriteButton.setToolTipText("Lägg till i favoriter");
                        } catch (IOException ex) {
                            Logger.getLogger(ProductSummaryView.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        //psv.filled = false;
                        dh.removeFavorite(p);
                    }
                    //Lägga till till favoriter
                }
            });
            psv.getListButton().addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    JMenuItem menuItem;
                    JPopupMenu popup;
                    popup = new JPopupMenu();

                    JPanel title = new JPanel();
                    title.setLayout(new BoxLayout(title, BoxLayout.X_AXIS));

                    title.add(new JLabel("      Välj inköpslista    "));
                    JLabel x = new JLabel("  X ");
                    x.addMouseListener(new MouseListener() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            popup.setVisible(false);
                        }
                        @Override
                        public void mousePressed(MouseEvent e) {}

                        @Override
                        public void mouseReleased(MouseEvent e) {}

                        @Override
                        public void mouseEntered(MouseEvent e) {}

                        @Override
                        public void mouseExited(MouseEvent e) {}
                    });
                    title.add(x);
                    popup.add(title);
                    popup.add(new JSeparator());




                    for(String s : Utils.getListor()){
                        menuItem = new JMenuItem(s);
                        menuItem.addActionListener(new ActionListener() {

                            @Override
                            public void actionPerformed(ActionEvent e) {
                                Utils.addProductToList(psv.getProduct(), s);
                            }
                        });
                        popup.add(menuItem);
                    }
                    popup.add(new JSeparator());

                    JPanel panel = new JPanel();
                    panel.setLayout(new BoxLayout(panel, BoxLayout.X_AXIS));



                    JTextField tf = new JTextField();
                    JButton button = new JButton("ny");

                    panel.add(tf);

                    tf.addKeyListener(new KeyAdapter() {
                        public void keyPressed(KeyEvent evt){
                            if(evt.getKeyCode() == KeyEvent.VK_ENTER){
                                button.doClick();
                            }
                        }
                    });



                    button.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            if(tf.getText().length() == 0 || tf.getText().contains(";") || Utils.getListor().contains(tf.getText())){
                                tf.setText("");

                                return;
                            }

                            Utils.createEmptyList(tf.getText());
                            //Utils.addProductToList(psv.getProduct(), tf.getText());

                            JMenuItem newItem = new JMenuItem(tf.getText());
                            newItem.addActionListener(new ActionListener() {

                                @Override
                                public void actionPerformed(ActionEvent e) {
                                    System.out.println(newItem.getText());
                                    Utils.addProductToList(psv.getProduct(), newItem.getText());
                                }
                            });
                            popup.add(newItem, popup.getComponentCount()-2);

                            popup.setVisible(false);
                            popup.setVisible(true);

                            tf.setText("");
                        }
                    });


                    panel.add(button);
                    popup.add(panel);



                    popup.show(psv.getListButton(), 40, 0);
                }
            });

            map.put(p,psv);
        }
    }

    private void sortVarorView() {
        String s = String.valueOf(sortingComboBox.getSelectedItem());
        
        Component[] components = varorPanel.getComponents();
        varorPanel.removeAll();
        varorPanel.revalidate();
        List<Product> list = new ArrayList<Product>();
        
        for(Component c : components){
            ProductSummaryView psv = null;
            if(c instanceof ProductSummaryView){
                psv = (ProductSummaryView) c;
                list.add(psv.getProduct());
            }
            
        }
        
        Collections.sort(list, new ProductComparator(s));
        
        updateVarorView(list);
    }
        

    public void treeImage(){
    /*Icon closedIcon = new ImageIcon("src/imat/resources/bilder/erbjudande.jpg");
    DefaultTreeCellRenderer renderer = (DefaultTreeCellRenderer) jTree2.getCellRenderer();
    renderer.setClosedIcon(closedIcon);
    */
        
    jTree2.setCellRenderer(new LocalCellRenderer(jTree2));
    jTree1.setCellRenderer(new LocalCellRenderer(jTree1));

    }
    
    private void showSortPanelAndAntalProductLabel(boolean b){
        antalProdukterLabel.setVisible(b);
        sortLabel.setVisible(b);
        sortingComboBox.setVisible(b);
    }
    
    public JPanel getVarorPanel(){
        return varorPanel;
    }
    
    private void setSaleItems(){
        String melon = dh.getProduct(90).getName();
        
        if(dh.getProduct(90).getName().equals("Vattenmelon")){
            System.out.println("Namn på vattenmelon " + melon);
            dh.getProduct(90).setPrice(4.90);
        }
    }
    

}
